// Copyright 2021 AI Redefined Inc. <dev+cogment@ai-r.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cogment_verse;

message NDArray {
  string dtype = 1;
  repeated uint32 shape = 2;
  bytes data = 3;
}


message EnvironmentConfig {
  string run_id = 1;
  int32 player_count = 2;
  bool render = 5;
  bool flatten = 6;
  int32 render_width = 7;
  uint32 framestack = 8;
  uint32 seed = 9;
}

message EnvironmentParams {
  string implementation = 1;
  EnvironmentConfig config = 2;
}

message ActorConfig {
    string run_id = 1;
    string model_id = 2;
    int32 model_version = 3;
    repeated int32 num_input = 4;
    int32 num_action = 5;
    string env_type = 6; // TODO Remove those by retrieving info from the environment instead
    string env_name = 7;
}

message ActorParams {
  string name = 1;
  string actor_class = 2;
  string implementation = 3;
  ActorConfig config = 4;
}

message TrialConfig {
  string run_id = 1;
  EnvironmentParams environment = 3;
  repeated ActorParams actors = 4;
  int32 distinguished_actor = 6;
}

message Observation {
  NDArray vectorized = 1;
  bytes pixel_data = 2;
  repeated int32 legal_moves_as_int = 3;
  int32 current_player = 4; // active player for multi-agent turn-based environments
  int32 player_override = 5;  // player that _actually_ acted (in case of override/intervention)
}

message ContinuousAction {
  repeated float data = 1;
}

message AgentAction {
  oneof action {
    ContinuousAction continuous_action = 1;
    int32 discrete_action = 2;
  };
}

message ModelArgs {
  float v_min = 1;
  float v_max = 2;
  uint32 start_timesteps = 4;
  repeated int32 high_action = 5;
  repeated int32 low_action = 6;
  float expl_noise = 7;
  bool target_net_soft_update = 8;
  uint32 screensize = 9;
}

message ReplayBufferConfig {
    string action_dtype = 1;
    string observation_dtype = 2;
    string name = 3;
    uint32 capacity = 4;
    uint32 stack_size = 5;
    float gamma = 6;
}

message TargetNetUpdateSchedule {
    string name = 1;
    bool off_value = 2;
    bool on_value = 3;
    uint32 period = 4;
}

message UpdatePeriodSchedule {
    string name = 1;
    bool off_value = 2;
    bool on_value = 3;
    uint32 period = 4;
}

message EpsilonSchedule {
    string name = 1;
    float init_value = 2;
    float end_value = 3;
    uint32 steps = 4;
}

message LearnSchedule {
    string name = 1;
    bool off_value = 2;
    bool on_value = 3;
    uint32 steps = 4;
}

message OptimizerFnConfig {
    string name = 1;
    float lr = 2;
    float weight_decay = 3;
    bool centered = 4;
    float momentum = 5;
    float eps = 6;
    float alpha = 7;
}

message RepresentationNetConfig {
    string name = 1;
    repeated int32 channels = 2;
    repeated int32 kernel_sizes = 3;
    repeated int32 strides = 4;
    repeated int32 paddings = 5;
    repeated int32 mlp_layers = 6;
}

message RunConfig {
  string name = 1;
  repeated uint32 num_input = 2;
  uint32 num_action = 3;
  string agent_implementation = 4;
  string environment_type = 5;
  string environment_name = 6;
  uint32 player_count = 7;
  uint32 epsilon_steps = 9;
  uint32 lr_warmup_steps = 12;
  uint32 demonstration_count = 13;
  uint32 total_trial_count = 14;
  uint32 model_publication_interval = 15;
  uint32 model_archive_interval_multiplier = 16; // Archive every fourth published model
  uint32 render_width = 17;
  uint32 batch_size = 18;
  uint32 min_replay_buffer_size = 19;
  uint32 max_parallel_trials = 20;
  ModelArgs model_kwargs = 21;
  bool flatten = 23;
  bool aggregate_by_actor = 24;
  uint32 framestack = 25;
  RepresentationNetConfig representation_net = 26;
  OptimizerFnConfig optimizer_fn = 27;
  string init_fn = 28;
  string loss_fn = 29;
  ReplayBufferConfig replay_buffer = 30;
  float discount_rate = 31;
  float reward_clip = 32;
  TargetNetUpdateSchedule target_net_updateschedule = 33;
  UpdatePeriodSchedule update_period_schedule = 34;
  EpsilonSchedule epsilon_schedule = 35;
  float test_epsilon = 36;
  LearnSchedule learn_schedule = 37;
}

message MLPNetworkConfig {
  uint32 hidden_size = 1;
}

message SimpleA2CTrainingConfig {
  uint32 epoch_count = 1;
  uint32 epoch_trial_count = 2;
  uint32 max_parallel_trials = 3;
  float discount_factor = 4;
  float entropy_coef = 5;
  float value_loss_coef = 6;
  float action_loss_coef = 7;
  float learning_rate = 8;
}

message SimpleA2CTrainingRunConfig {
  EnvironmentParams environment = 1;
  ActorConfig actor = 2;
  SimpleA2CTrainingConfig training = 3;
  MLPNetworkConfig actor_network = 4;
  MLPNetworkConfig critic_network = 5;
}
